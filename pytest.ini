[tool:pytest]
# Pytest configuration for async testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Async testing configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Markers
markers =
    asyncio: marks tests as async (deselect with '-m "not asyncio"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    slow: marks tests as slow running
    database: marks tests that require database access

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage
addopts = 
    --strict-markers
    --strict-config
    --verbose
    -ra
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sqlalchemy.*

# Minimum version
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Parallel execution
# Uncomment to enable parallel test execution
# addopts = -n auto