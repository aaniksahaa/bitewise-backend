"""sync_database_schema_with_models

Revision ID: 16d48fc59bff
Revises: add_last_login_at_to_users
Create Date: 2025-07-26 23:30:03.738442

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '16d48fc59bff'
down_revision = 'add_last_login_at_to_users'
branch_labels = None
depends_on = None


def upgrade():
    # Create ENUM types first
    gender_type = postgresql.ENUM('male', 'female', 'other', name='gender_type')
    cooking_skill_level_type = postgresql.ENUM('beginner', 'intermediate', 'advanced', name='cooking_skill_level_type')
    
    gender_type.create(op.get_bind())
    cooking_skill_level_type.create(op.get_bind())
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('conversations', 'extra_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('fitness_plans', 'suggestions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('health_history', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('health_history', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('health_history', 'change_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('intakes', 'dish_id',
               existing_type=sa.BIGINT(),
               comment='Foreign key to dishes table. Can be NULL for water-only intakes.',
               existing_nullable=True)
    op.alter_column('llm_models', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('llm_models_id_seq'::regclass)"))
    op.alter_column('llm_models', 'is_available',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('llm_models', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_models', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('messages', 'attachments',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('messages', 'reactions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('messages', 'extra_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_constraint(op.f('password_reset_requests_request_id_key'), 'password_reset_requests', type_='unique')
    op.drop_constraint(op.f('refresh_tokens_token_key'), 'refresh_tokens', type_='unique')
    
    # Convert gender column to ENUM type
    op.alter_column('user_profiles', 'gender',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('male', 'female', 'other', name='gender_type'),
               existing_nullable=False,
               postgresql_using='gender::gender_type')
    
    # Convert cooking_skill_level column to ENUM type
    # First drop the existing default
    op.alter_column('user_profiles', 'cooking_skill_level',
               existing_type=sa.VARCHAR(length=20),
               server_default=None)
    
    # Then convert the column type
    op.alter_column('user_profiles', 'cooking_skill_level',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('beginner', 'intermediate', 'advanced', name='cooking_skill_level_type'),
               existing_nullable=True,
               postgresql_using='cooking_skill_level::cooking_skill_level_type')
    
    # Set the new default with correct ENUM type
    op.alter_column('user_profiles', 'cooking_skill_level',
               existing_type=sa.Enum('beginner', 'intermediate', 'advanced', name='cooking_skill_level_type'),
               server_default=sa.text("'beginner'::cooking_skill_level_type"))
    
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_profiles', 'cooking_skill_level',
               existing_type=sa.Enum('beginner', 'intermediate', 'advanced', name='cooking_skill_level_type'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'beginner'::character varying"))
    op.alter_column('user_profiles', 'gender',
               existing_type=sa.Enum('male', 'female', 'other', name='gender_type'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.create_unique_constraint(op.f('refresh_tokens_token_key'), 'refresh_tokens', ['token'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('password_reset_requests_request_id_key'), 'password_reset_requests', ['request_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('messages', 'extra_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('messages', 'reactions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('messages', 'attachments',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('llm_models', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_models', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('llm_models', 'is_available',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('llm_models', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('llm_models_id_seq'::regclass)"))
    op.alter_column('intakes', 'dish_id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_nullable=True)
    op.alter_column('health_history', 'change_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('health_history', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('health_history', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('fitness_plans', 'suggestions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('conversations', 'extra_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    
    # Drop ENUM types in downgrade
    op.execute('DROP TYPE IF EXISTS gender_type')
    op.execute('DROP TYPE IF EXISTS cooking_skill_level_type')
    # ### end Alembic commands ### 